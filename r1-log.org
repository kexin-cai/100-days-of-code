* #100DaysOfCode Log - Round 1 - [Mr. Cai]
:PROPERTIES:
:CUSTOM_ID: daysofcode-log---round-1---mr.-cai
:END:
The log of my #100DaysOfCode challenge. Started on [May 13, Friday,
2022]. 100 天编程调整记录。从 22 年五月 13 号开始。

** KILL 计划
:PROPERTIES:
:CUSTOM_ID: 计划
:END:
- 学习 V 语言
- 学习使用 neovim
- 配置 Emacs
- 写一个 cad 简单图形程序

** Log 记录
:PROPERTIES:
:CUSTOM_ID: log-记录
:END:
*** R1D1 第一天
:PROPERTIES:
:CUSTOM_ID: r1d1-第一天
:END:
**** 给 Emacs 建立写 md 文档的设置
:PROPERTIES:
:CUSTOM_ID: 给-emacs-建立写-md-文档的设置
:END:
- 办公室环境是 wsl+arch

org 文件比较熟悉，现在准备改写 md 了，要学习一些新的东西。
还有要给选择是写 org 文件，把 md 改成 org。 先看看 md 怎么样吧。

- 结果是不太想学习 Emacs 了，准备拥抱 vim 怀抱了

- 在 arch 系统里 安装了 ssh 生成了 GitHub 的密钥，发到了 GitHub
  网站，这样这个系统就可以 push 了。

**** 继续学习 neovim
:PROPERTIES:
:CUSTOM_ID: 继续学习-neovim
:END:
nvchad: https://nvchad.github.io/getting-started/setup - 熟悉 lua 语法
https://www.bilibili.com/video/BV1QL4y147VD?p=3 - 学习快捷键的设定
应该是 nvim 的第三课，nvim from scratch 系列教程。 keymap

*** R1D2 第二天
:PROPERTIES:
:CUSTOM_ID: r1d2-第二天
:END:
- 在拉取的时候 git
  给出提示需要设定拉取的默认规则，在本地仓库里给出设定为
  rebase=false，意思是直接合并。
- 继续学习 nvim 入门教程

时间：+1h

- 继续学习 nvim：第四天的课程，是讲解插件的管理，使用的是 packer。
- 拖延症的四种表现。有一项就是准备工作。正如我在做的东西，也可以算作是一种拖延吧。

*** R1D3 第三天
:PROPERTIES:
:CUSTOM_ID: r1d3-第三天
:END:
- 继续学习配置 nvim：今天是主题颜色，视频时长 16 分钟，
- 看了一会儿，mac M1 芯片的电脑虚拟化的教程，推荐使用 UTM
  安装了软件，试了下 arch 不成功。
- 浏览 HN， 看了第三、四、五代编程语言。
- 一个网站，给初学者教授全栈的个人网站，https://thefullstackdev.net/
- 一个个人网站，只使用 html 来写， https://bjhess.com/
  可以学一下，很简单的
- 昨天看了一篇文章，一个大牛的写的关于 web 网页的糟点，认为应该重新考虑
  web
  的发展，从头来做。https://macwright.com/2020/08/22/clean-starts-for-the-web.html，这个网站，
  看了作者是一个很厉害的人物。

*** R1D4 第四天
:PROPERTIES:
:CUSTOM_ID: r1d4-第四天
:END:
- nvim 自动完成设置。
- 安装 org 插件 发现了问题： 无法安装 orgmode.nvim 的插件。报错是没有 cc
  clang 等的编译器。 开始安装 gcc12.1 居然没有 gcc 的安装我晕了。 安装了
  base-devel
- 终于搞好了，原来是需要编译的。
- 在 vnim 里编辑了一下日志文件，是 org 格式的，发现有些功能是没有的，没有 Emacs 完善。估计还是要留在这里 Emacs 了。
- 发现了两个有趣的项目，记录在 roam 了。
  [file:~/Learn/github/my-notes/journal.org][5yue16ri]]

*** R1D5 第五天

#+begin_src shell

# convert md to org-mode
pandoc r1-log.md -s -o r1-log.org
# 还是在Emacs里编辑org习惯！
#+end_src
#+begin_src emacs-lisp
;; 插入设计戳，提示出现 对话框 输入时间。
(org-time-stamp) ;; SPA m d t

#+end_src

*** R1D6 第六天
学点什么呢，v语言似乎有点不流行？
vlang
都差不多吧。
要的话晚上来看看。
♨️一天，Gaming......
*** R1D7 第七天
<2022-05-20 Fri 19:00>
工作比较忙，学习时间少了不少。
还是找书，浏览书籍。没怎么深入看书。
又浏览了一些书，记了一些笔记，在 roam 里面。
**** vlang 继续吧 学习一下 gui 编程
**** 编程环境建立
Emacs doom 加上 v-mode
https://github.com/damon-kwok/v-mode
#+begin_src emacs-lisp
(use-package v-mode
  :straight (v-mode
             :type git
             :host github
             :repo "damon-kwok/v-mode"
             :files ("tokens" "v-mode.el"))
  :config
  :bind-keymap
  ("M-z" . v-menu)
  ("<f6>" . v-menu)
  ("C-c C-f" . v-format-buffer)
  :mode ("\\(\\.v?v\\|\\.vsh\\)$" . 'v-mode))

#+end_src

上面的代码这是报错，最后通过 M-x package-install 来安装的，加了设置。
还可以。
成功了。
#+begin_src v
fn main() {
println('hello world!!!')
            }

#+end_src
#+begin_src shell
v run hello

#+end_src
*** R1D8 第八天
<2022-05-22 Sun 15:00>
**** 新的想法，建立一个文件来追踪一个学习时间记录
感觉建立一个 execel 文件比较好是吧，因为简单一些。好统计。
计划要学习 keynote 和 number 了。
**** 目前的尝试是 使用苹果日历，来安排活动，增加了 学习和非学习两个日历，
分别设置不同的颜色。
*** R1D9 第九天
    思考学习什么编程技术。
    整理一下学到的东西，最近刚学习了 c 语言，想起了学习 C 项目：nvim 项目。可以作为新手项目来学习一下。
    <2022-05-23 Mon 16:18> 
    似乎自己的水平还不够哇！！
**** 以前学过的东西整理：
     - C
     - JS  HTML  CSS elm react vue svelte hugo lisp racket scheme emacs ruby rails python 
       ios
       swift OC java linux unix 
       克服拖延症，时间管理，


     发现 5 月 21 号没有学习，忘记了忘记自己为什么没有写日记了。我晕死了。
**** 发现一个小而美的 wiki
feather.wiki  羽毛维基，开始学习这个很不错，
有个想法是自己编写一个类似的东西，但是使用 org-mode 来处理这个，网站模拟 Emacs 的编辑模式，针对 Emacs 用户的使用习惯，使用 vim 打字的方式。
不要好高骛远了，还是先学习这个软件的使用吧。
***** TODO 学习羽毛维基
***** 在 codeberg 上注册了一个账号
codeberg.org
*** R1D10 第十天
白天工作事情太多了。
<2022-05-24 Tue 20:00>
*** R1D11 第十一天
<2022-05-25 Wed 21:00>
工作比较忙，晚上在家搞。
#+begin_src emacs-lisp

                        (insert-rectangle '("first" "second" "third"))


(apply 'max 3 7 3 4 '(4 8 5))
;;; First version 0.1
(defun column-of-graph (max-graph-height actual-height)
  "Return list of strings that is one column of a graph"
  (let ((insert-list nil)
        (number-of-top-blanks (- max-graph-height actual-height)))
;; Fill in *
    (while (> actual-height 0)
      (setq insert-list (cons "*" insert-list))
    (setq actual-height (1- actual-height)))

                        ;;; Fill in blanks
    (while (> number-of-top-blanks 0)
      (setq insert-list (cons " " insert-list))
      (setq number-of-top-blanks (1- number-of-top-blanks)))

    ;; return while list
    insert-list))
         (column-of-graph 5 3)
#+end_src
*** R1D12 第十二天
<2022-05-26 Thu 20:00>

#+begin_src emacs-lisp

(defvar graph-symol "*"
  "String used as symol in graph, usually an asterisk.")
;; 15.1  graph-body-print  function

#+end_src
**** 继续学习 Emacs-lisp introduce
**** 后面几章都浏览完了。
*** R1D13 第十三天
<2022-05-27 Fri 20:00>
**** 工作
热电厂的事情终于解决了。大门口的暖气我们来重新接，阀门井取消封死。
**** code 100 天学习什么呢？
还没有最后的答案，要不还是学习 ruby on rails 得了。

客观上讲，今天应该不算。
*** R1D14 第十四天
<2022-05-28 Sat 09:00>
**** 100 天都学习什么东西？
是否做一个元学习的系列。
#+begin_src v


#+end_src
**** 一个新的想法， 做一个代码结构图解，图形化的显示器
cad 的工程师的灵感，都是使用图纸来设计建筑，软件是否也可以来使用图纸来做。
类似与 autocad 的软件来画图，UML 应该就是这么做的吧。

使用什么软件来作图？
- draw.io
- cad
- pages
- word

这个是低层次的东西，为了理解代码来的。类似于代码可视化的问题。

**** 编写一个画图程序，模仿 cad 程序，是很难的。 三个选择：
- Emacs

- vim

- native
还是不要过度优化，
罪恶之源就是过度优化，先实验一下吧。:w
**** 编写一个类似与写字板类型的 cad 画图程序。
或者是类似于画图的程序的 cad 程序；
特征：
- 极简主义
- 类似与 vim
- 插件化，容易扩展
- vlang 来写？c 语言好
- 桌面应用 or web app？
**** 思考一个问题：忘记了？
画图来说明架构是 很平常的事情，
**** 建筑行业和软件行业对比研究
似乎以前思考过
*** R1D15 第十五天
<2022-05-30 Mon 20:00>
晚上值班，又找一个一些关于 UML 的书籍，还有软件开发的，以及全栈的。
思考关于图形理解编程的资料。
图形理解编程，图形知识工具，随着水平的提高，工具就可以不用了。类似于初学者练习瑜伽，一开始要使用辅助工具，随着的水平的提高，就可以丢弃工具也可以达到目的了。
#+begin_src v

#+end_src
#+begin_src red

#+end_src
#+begin_src nim

#+end_src
*** R1D16 第十六天
<2022-05-31 Tue 20:40>
#+begin_src python

#+end_src
*** R1D17 第十七天
<2022-06-08 Wed 21:15>

昨天开始搞  rust 语言。
在看 入门教程书，很不错，中文翻译的好。
#+begin_src rust
fn main () {
 println! ( " hello world !" );
}

#+end_src
看到了第三章了，在讲解借用，引用，和 slice。
*** R1D18 第十八天
<2022-06-09 Thu 20:45>
进度很快看了两章的内容。
第五章：使用结构体来组织相关联的数据
第六章：枚举与模式匹配
现在开始看 第七章：使用包、Crate 箱子和模块来管理不断增长的项目
**** 7.1 包和 crate
**** 7.2 定义模块来控制作用域与私有性
**** 7.3 路径用于引用模块树中的项目
*** R1D19 第十九天
继续学习 rust 模块化方法。
#+begin_src rust
mod front_of_house;
pub use crate::front_of_house::hosting;
pub fn eat_at_restaurant(){
hosting::add_to_waitlist();
}

#+end_src
**** 总结
Rust 提供了将包分成多个 crate，将 crate 分成模块，以及通过指定绝对或者是相对路径从一个模块引用另一个模块中定义的项的方式。你可以通过使用 use 语句将路径引入作用域，这样在多次使用时可以使用更短的路径。模块定义的代码默认是私有的，不过可以选择增加关键字 pub 使其变为公有。
**** ch08 常见集合
collection
数组和元组，集合数据存储在堆上。
***** vector
原来存储一系列的值
Vec(T),只能存储相同类型的值。例如文件中的文本行，或者是购物车中商品的价格。

***** string
***** map(hash map)
*** R1D20 第二十天
<2022-06-12 Sun 20:15>
**** ch09 错误处理
#+begin_src rust
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => match error.kind() {
            ErrorKind::NotFound => match File::create("hello.txt") {
                Ok(fc) => fc,
                Err(e) => panic!("Problem creating the file: {:?}", e),
            },
            other_error => {
                panic!("Problem opening the file: {:?}", other_error)
            }
        },
    };
}

#+end_src
*** R1D21 第二十一天
#+begin_src rust
fn main() {
let number_list = vec![34, 50, 25 ,100,63];
let mut largest = number_list[0];
for number in number_list {
if number > largest {
largest = number;
}
}
println!("the largest number is {}", largest);
}

fn largest<T>(list: &[T] -> T) {}
&i32   //
    &'a i32 //
    &'a mut i32   //


#+end_src
<2022-06-13 Mon 15:10>
泛型数据类型

在函数定义中使用泛型

trait: 定义共享行为
生命周期，注解语法。
生命周期注解描述了多个引用生命周期相互的关系，而不影响其生命周期。
深入了解生命周期：生命周期语法是用于函数的多个参数与其返回值的生命周期进行关联的。
*** R1D22 第二十二天
#+begin_src rust
use std::fmt::Display;

fn longest_with_an_announcement<'a, T>(
x: &'a str,
y: &'a str,
ann: T,
) -> &'a str
where T: Display,
{
println!("Announcement! {}", ann);
if x.len()>y.len() {
x
}else{
y
}
}


#+end_src
<2022-06-14 Tue 08:20>
总结
泛型类型参数、trait bounds 以及泛型生命周期类型。
*** R1D23 第二十三天
<2022-06-15 Wes 17:10>

继续学习 rust 测试。
总结：Rust 的测试功能提供了一个确保即使你改变了函数的实现方式，也能继续以期待的方式运行的途径。单元测试，集成测试。
**** ch12 示例项目：构建一个命令行程序
globally search a regular expression and print --> grep
ripgrep
复习一下内容：
- 代码组织
- vector String
- 错误处理
- trait 生命周期
- 测试

*****  12.1 接受参数
#+begin_src rust
use std::env;
fn main() {
    let args: Vec<String> = env::args().collect();
    println!("{:?}", args);
}

#+end_src

***** 12.2 读取文件

***** 12.3 模块化 错误处理
*** R1D24 第二十四天
<2022-06-16 Thu 19:40>
继续示例项目，minigrep
#+begin_src rust


#+end_src
**** 重构以改进模块化与错误处理
最长的一章。
*** R1D25 第二十五天
<2022-06-18 Sat 10:30>
go my minigrep project
#+begin_src rust


#+end_src
**** 采用测试驱动开发完善 库 的功能
src/lib.rs main.rs
TDD :
- 编写一个失败的测试，并运行它以确保它失败的原因是你所期望的。
- 修改代码来使新的测试通过
- 重构代码， 仍能通过测试
- 重复
***** 编写失败测试
#+begin_src rust
#[cfg(test)]
mod tests {
use super::*;

#[test]
fn one_result() {
let query = "duct";
let contents = "\
    Rust:
safe, fast, productive.
Pick three,";
    assert_eq!(vec!["safe, fast, productive."], search(query, contents));
}

}

#+end_src
*****
*****
 加油，坚持 坚持✊   ！！！！！！！！坚持 ✊  ！！！！
*** R1D26 第二十六天
<2022-06-19 Sun 11:00>
复习了 字符串切片， 生命周期， B 站有老师的视频教程，也是按照本书的章节来讲授的。
*** R1D27 第二十七天
<2022-06-20 Mon 09:30>
学习 rust
***** 将代码拆分到库 crate
***** 闭包：可以捕获环境的匿名函数
闭包---匿名函数
闭包类型推断和注解
*** R1D28 第二十八天
<2022-06-21 Tue 08:50>
拒绝紫砂，拒绝购物！！！
继续学习 rust.
**** 使用迭代器处理元素序列
迭代器（iterator）负责遍历序列中的每一项和决定序列何时结束的逻辑。惰性的。
#+begin_src rust
// 创建一个迭代器
let v1 = vec![1, 2, 3];
let v1_iter = v1.iter();
for val in v1_iter {
println!("got: {}", val);
}
#+end_src

迭代器都实现了 Iterator 的 trait
#+begin_src rust
pub trait Iterator {
   type Item;
    fn next(&mut self) -> Option<Self::Item>;
    // 省略 方法的具体时间；
            }
#[test]
fn iterator_demonstration() {
        let v1 = vec![1,2,3];
    let mut v1_iter = v1.iter();
    assert_eq!(v1_iter.next(), Some(&1));

            }
#+end_src
产生其他迭代器的方法
filter 迭代器适配器和闭包的常规用例：
#+begin_src rust
// src/lib.rs

#[derive(PartialEq, Debug)]
struct Shoe {
    size: u32,
    style: String,
            }

fn shoes_in_size(shoes: Vec<Shoe>, shoe_size: u32) -> Vec<Shoe> {
    shoes.into_iter().filter(|s| s.size == shoe_size).collect()
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    let shoes = vec![
        Shoe {
        size: 10,
        style: String::from("sneaker"),
            },
       Shoe {
                size: 13,
                style: String::from("sandal"),
            },
            Shoe {
                size: 10,
                style: String::from("boot"),
            },

            ];

    let in_my_size = shoes_in_size(shoes, 10);
           assert_eq!(
            in_my_size,
            vec![
                Shoe {
                    size: 10,
                    style: String::from("sneaker")
                },
                Shoe {
                    size: 10,
                    style: String::from("boot")
                },
            ]
        );
}

#+end_src
*** R1D29 第二十九天
#+begin_src

#+end_src
<2022-06-23 Thu 20:45>
昨天一个人在家，看抖音，看直播带货。打星际和炉石传说。
今天继续 rust。
跳过第 15 章智能指针，看第 16 章--无谓并发。
concurrent programming --- 并发 不同部分互相独立
parallel programming   --- 并行 不同部分同时执行
fearless concurrency   可能包含了 以上两个内容
- 如何创建线程来同时运行多段代码
- 消息传递并发
- 共享状态并发
- sync 和 send
**** 16.1 threads
- Race conditions
- Deadlocks
- 不稳定的错误
由操作系统调用 OS api 来创建线程 1:1.
***** KILL 有点想建一个论坛社区，分享紫砂，壶友交流
需要找找论坛软件，买域名，服务器，备案，等等吧。而且还不一定能批准。麻烦了。
***** TODO 学习大蛇
**** ch14 更多关于 Cargo Crates.io
***** 14.1 采用发布配置自定义构建
***** 14.2 将 crate 发布到 Crates.io
***** 14.3 Cargo 工作空间
***** 14.4 使用 Cargo install 从 Crates.io 安装二进制文件
*** R1D30 第三十天
<2022-06-24 Fri 20:30>
- 消息传递并发
#+begin_src rust
use std::sync::mpsc;
use std::threads;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spamn(move || {
       let val = String::from("hi");
        tx.send(val).unwrap();
    });
    let received = rx.recv().unwrap();
    println!("Got: {}", received);

}

#+end_src
- 信道和所有权转移
*** R1D31 第三十一天
<2022-06-26 Sun 10:00>
rust oop
昨天一边看的。
*** R1D32 第三十二天
<2022-06-27 Mon 15:10>
模式匹配：
- if let
  #+begin_src rust
let favorite_color: Option<&str> = None;
if let Some(color) = favorite_color {
println!("Use your favorite color, {}, as the background", color);
} else if let ... = age {  }
else {

println!("..");
}


}
- while let


  #+end_src

- while let

- for

- let

- 函数参数

  可反驳的  ---   不可反驳的

  所有得模式匹配 例子。
*** R1D33 第三十三天
<2022-06-28 Tue 20:40>
**** 19 高级特性

***** 19.1 不安全的 rust
舍弃 Rust 的某些保证，手动自己维护这些保证
***** 19.2 高级 trait
关联类型，默认类型参数，完全限定语法，超 trait 和 newtype 模式。
***** 19.3 高级类型

***** 19.4 高级函数和闭包
***** 19.5 宏
宏（Macro）--- 一系列的功能：使用 macro_rules！的声明宏， 和三种 过程宏：

宏和函数的区别
从根本上来说，宏是一种为写其他代码而写代码的方式。所谓的元编程--metaprogramming
但宏有一些函数没有的附加能力。
*** R1D34 第三十四天
<2022-06-29 Wed 20:30>
**** 20 最后一章 一个实际的项目例子
今天一个不算， 玩炉石传说了！！！
*** R1D35 第三十五天
<2022-07-01 Fri 19:00>
**** 学习 日程管理 agenda
***** TODO 明天去基建处值班
:PROPERTIES:
:CATEGORY: 工作
:END:
***** TODO 学习 rust :rust:coding:
SCHEDULED: <2022-07-12 Tue 08:12>
:PROPERTIES:
:CATEGORY: 学习
:END:
***** TODO learning code
DEADLINE: <2022-08-01 Mon 08:00> SCHEDULED: <2022-07-01 Fri>
:PROPERTIES:
:CATEGORY: learn
:END:
- Note taken on [2022-07-01 Fri 19:27] \\
  learning code .
*** R1D36 第三十六天
SCHEDULED: <2022-07-02 Fri>
**** 读书：4000 weeks life
笔记：现实的冷风
So this book is an attempt to help redress the balance—to see if we can’t discover, or recover, some ways of thinking about time that do justice to our real situation: to the outrageous brevity and shimmering possibilities of our four thousand weeks
这种“实现可能在于接受而不是否认我们的时间限制”的观念，不会让古希腊和罗马的哲学家感到惊讶。他们认为无限是神的专属;人类最崇高的目标不是成为神一样的人，而是全心全意地做一个人。在任何情况下，这就是现实，它可以令人惊讶地激励去面对它。
早在 20 世纪 50 年代，一位非常古怪的英国作家查尔斯·加菲尔德·洛特·杜·坎(Charles Garfield Lott Du Cann)写了一本名为《学会生活》(Teach Yourself to Live)的短篇小说，他在书中推荐了拥抱极限的生活，他对自己的建议令人沮丧的说法做出了尖刻的回应。“令人沮丧?一点也不。
没有什么比洗个冷水澡更让人沮丧的了……你不再像大多数人那样，被对自己生活的错误的、误导性的幻觉所迷惑和迷惑。”这是一种优秀的精神，以面对挑战，利用好时间。
我们没有人能单凭一己之力推翻一个致力于无限生产力、注意力分散和速度的社会。
但就在此时此刻，你可以停止相信任何一种幻想，认为任何一种幻想都能带来满足。你可以面对现实。你可以打开淋浴，准备好喝点提神的冰水，然后走进去。.
*** R1D37 day 37
no learn rust and code.
*** R1D38 day 38
第二章  效率陷阱

Let's begin with busyness.
It isn't out only time problem, and it isn't everyone's problem.
准备放在网盘里放一个 org 文档，单独把翻译放在里面。
在笔记本里放了一个记录，roam 里面了。
*** R1D39 day 39
<2022-07-06 Wed 21:00>
4000 weeks 看到第 7 章了。
方法：
- 使用 edge 浏览器的 epub reader 插件打开电子书
- 复制文本，到浏览器里的网易有道翻译网站
- 每次可以翻译 5000 个字符，复制中文到 org 文档中
- 删除已经翻译好的英文，再重复上一步，知道完成
- 同步使用网盘来同步。
*** R1D40 day 40
<2022-07-12 Tue 20:15>
前几天回顾：在看 4000 weeks，翻译整理，阅读。基本看完了。准备在读一遍，写一篇心得。笔记读书之类的东西。
编程 下一步的打算：继续学习 rust，不能停止，昨天看到了一个 web 框架， poem 有时间来看看。
*** R1D41  day 41
<2022-07-16 Sat 09:15>
暑假第一周反而特别忙，今天终于可以休息了。
实际上编程 练习基本停止了。不太愿意学习了。
*** R1D42 day 42 :haskell:
<2022-07-18 Mon 16:00>

开始学习 haskell
B 站上面的教程。https://www.bilibili.com/video/BV16x411y7d7?p=7&spm_id_from=pageDriver&vd_source=b4b4ec602a89d6f2030db8be5ac9e18c

#+begin_src haskell

[1, 2, 3] ++ [4, 5]

                        1: [3,4]
  head [1,2,3]
  tail [5 ,5, 6]




                        (1, 'a', True )


  let dict = [("one", 1),("two", 2),("three",3)]
    lookup "one" dict

#+end_src
*** R1D43 day 43
<2022-07-21 Thu 17:15>
learnyouahaskell.com
ch 4.2 guard
ch 4.3 where
clh 4.4 let
第五章 递归
ch05 5.3 实现了几个常用的函数，使用递归来实现的。好哇。
5.4 快速排序
#+begin_src haskell
quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
  let smallerSorted = quicksort [a | a <- xs, a <= x]
      biggerSorted = quicksort [a | a <- xs , a > x]
  in smallerSorted ++ [x] ++ biggerSorted


#+end_src
第六章 高阶函数
*** R1D44 day 44
<2022-07-23 Sat 10:40>
- 第八章 构造我们自己的 Types 和 Typeclass
  ch8.5 类型别名
#+begin_src haskell
data Either a b = Left a | Right b deriving (Eq, Ord, Read, Show)

data List a = Empty | Cons a (List a)

#+end_src
ch8.6 递归的定义数据结构
ch8.7 Typeclasses 的第二堂课
*** R1D45 day 45
<2022-07-25 Mon 14:00>
#haskell#
:haskell:
:vim:neovim:
把 zsh 启动的命令取消了，原来是 zlogin 文件。嫌弃速度太慢了。
*** r1d46 day 46
<2022-07-27 Wed 14:45>
昨天 整理书房，把架子安上了。
老 Mac 继续使用 vmware 虚拟机按照 arch
haskell 完成了 IO
ch11 Functor applicative Functor and Monoids  :haskell:
- Functor
- Applicative functor
- newtype
*** r1d47 day 47

<2022-07-28 Thu 17:30>
ch11 . Monoids
Lists are monoids
Product and Sum
Any and All
Using monoids to fold data structures
心得：有点看不懂，所以兴趣不大了。是不是应该做一些练习或者是项目来练习呢？
*** r1d48 day 48
<2022-07-29 Fri 16:15>
开始 做练习 在 Exercism https://exercism.org/tracks/haskell/exercises/pangram/edit
今天做了 5 个题目了。还不错，计算闰年的那个在网上找的思路和答案。
现在 在做 panggram 就是看一个字符串里面是否包含所有的字母。一个使用递归来循环，或者是 filter。
思考工具，如何思考，考虑问题，解决问题。
*** r1d49 day 49
<2022-07-30 17:00>
arch linux install 总是报错又一个 密室不对，结果查了好多，最后是答案是一条命令 shell
:秘诀:archlinux:
#+begin_src shell
# root 更新密匙 不要加u，否则会太大，无法安装，磁盘空间不够。:
#+end_src
haskell 练习 6 还是没有想出来。 检查一个 335
*** r1d50 day 50
<2022-08-04 16:00>
:exercism:Haskell:
上次那个问题解决了，还是找的答案。真的是精彩呀。
all 函数， elem map low 大概的框架都是知道了，不知道怎么组合。而且没有要考虑循环的问题。思想方法都和正常的语言的不一样的。学习到了。
总结下一学习 xmonad 的这几天的收获吧。
最后实验了一下 arco Linux 系统，由浅入深的教学，比较适合初学者，可以循序渐进的学习，里面的 wm 也比较多。更加熟练了 arch 系统安装的步骤。
*** r1d51 day 51
<2022-08-05 10:00>
:haskell:
又解决一个 问题， bob 的答复的问题，有点类似于聊天机器人的简化版。
学习了 函数的 guard 模式来写函数。
*** r1d52 day 52
<2022-08-06 Sat 14:50>
find a web site -- keepup , 是一个 it news 聚合网站。 不错。
web3 介绍： https://hayleyiscoding.hashnode.dev/web-3-for-beginners
*** r1d53 day 53
<2022-08-12 19:00>
搬家，交楼。忙得要死！
这个是占位用的，为了表明我还在！！！
*** r1d54 day 54
<2022-08-18 Thu 21:30>
继续练习 exercism 里的 Haskell 题目。
目前的题目是 collats 序列。
下载安装了 exercism 的命令行工具。 使用 code 打开 Haskell 项目自动升级 ghciup 真慢，大概搞了半个小时。
