* #100DaysOfCode Log - Round 1 - [Mr. Cai]
:PROPERTIES:
:CUSTOM_ID: daysofcode-log---round-1---mr.-cai
:END:
The log of my #100DaysOfCode challenge. Started on [May 13, Friday,
2022]. 100 天编程调整记录。从 22 年五月 13 号开始。

** 计划
:PROPERTIES:
:CUSTOM_ID: 计划
:END:
- 学习 V 语言
- 学习使用 neovim
- 配置 Emacs
- 写一个 cad 简单图形程序

** Log 记录
:PROPERTIES:
:CUSTOM_ID: log-记录
:END:
*** R1D1 第一天
:PROPERTIES:
:CUSTOM_ID: r1d1-第一天
:END:
**** 给 Emacs 建立写 md 文档的设置
:PROPERTIES:
:CUSTOM_ID: 给-emacs-建立写-md-文档的设置
:END:
- 办公室环境是 wsl+arch

org 文件比较熟悉，现在准备改写 md 了，要学习一些新的东西。
还有要给选择是写 org 文件，把 md 改成 org。 先看看 md 怎么样吧。

- 结果是不太想学习 Emacs 了，准备拥抱 vim 怀抱了

- 在 arch 系统里 安装了 ssh 生成了 GitHub 的密钥，发到了 GitHub
  网站，这样这个系统就可以 push 了。

**** 继续学习 neovim
:PROPERTIES:
:CUSTOM_ID: 继续学习-neovim
:END:
nvchad: https://nvchad.github.io/getting-started/setup - 熟悉 lua 语法
https://www.bilibili.com/video/BV1QL4y147VD?p=3 - 学习快捷键的设定
应该是 nvim 的第三课，nvim from scratch 系列教程。 keymap

*** R1D2 第二天
:PROPERTIES:
:CUSTOM_ID: r1d2-第二天
:END:
- 在拉取的时候 git
  给出提示需要设定拉取的默认规则，在本地仓库里给出设定为
  rebase=false，意思是直接合并。
- 继续学习 nvim 入门教程

时间：+1h

- 继续学习 nvim：第四天的课程，是讲解插件的管理，使用的是 packer。
- 拖延症的四种表现。有一项就是准备工作。正如我在做的东西，也可以算作是一种拖延吧。

*** R1D3 第三天
:PROPERTIES:
:CUSTOM_ID: r1d3-第三天
:END:
- 继续学习配置 nvim：今天是主题颜色，视频时长 16 分钟，
- 看了一会儿，mac M1 芯片的电脑虚拟化的教程，推荐使用 UTM
  安装了软件，试了下 arch 不成功。
- 浏览 HN， 看了第三、四、五代编程语言。
- 一个网站，给初学者教授全栈的个人网站，https://thefullstackdev.net/
- 一个个人网站，只使用 html 来写， https://bjhess.com/
  可以学一下，很简单的
- 昨天看了一篇文章，一个大牛的写的关于 web 网页的糟点，认为应该重新考虑
  web
  的发展，从头来做。https://macwright.com/2020/08/22/clean-starts-for-the-web.html，这个网站，
  看了作者是一个很厉害的人物。

*** R1D4 第四天
:PROPERTIES:
:CUSTOM_ID: r1d4-第四天
:END:
- nvim 自动完成设置。
- 安装 org 插件 发现了问题： 无法安装 orgmode.nvim 的插件。报错是没有 cc
  clang 等的编译器。 开始安装 gcc12.1 居然没有 gcc 的安装我晕了。 安装了
  base-devel
- 终于搞好了，原来是需要编译的。
- 在 vnim 里编辑了一下日志文件，是 org 格式的，发现有些功能是没有的，没有 Emacs 完善。估计还是要留在这里 Emacs 了。
- 发现了两个有趣的项目，记录在 roam 了。
  [file:~/Learn/github/my-notes/journal.org][5yue16ri]]

*** R1D5 第五天

#+begin_src shell

# convert md to org-mode
pandoc r1-log.md -s -o r1-log.org
# 还是在Emacs里编辑org习惯！
#+end_src
#+begin_src emacs-lisp
;; 插入设计戳，提示出现 对话框 输入时间。
(org-time-stamp) ;; SPA m d t

#+end_src

*** R1D6 第六天
学点什么呢，v语言似乎有点不流行？
vlang
都差不多吧。
要的话晚上来看看。
♨️一天，Gaming......
*** R1D7 第七天
<2022-05-20 Fri 19:00>
工作比较忙，学习时间少了不少。
还是找书，浏览书籍。没怎么深入看书。
又浏览了一些书，记了一些笔记，在 roam 里面。
**** vlang 继续吧 学习一下 gui 编程
**** 编程环境建立
Emacs doom 加上 v-mode
https://github.com/damon-kwok/v-mode
#+begin_src emacs-lisp
(use-package v-mode
  :straight (v-mode
             :type git
             :host github
             :repo "damon-kwok/v-mode"
             :files ("tokens" "v-mode.el"))
  :config
  :bind-keymap
  ("M-z" . v-menu)
  ("<f6>" . v-menu)
  ("C-c C-f" . v-format-buffer)
  :mode ("\\(\\.v?v\\|\\.vsh\\)$" . 'v-mode))

#+end_src

上面的代码这是报错，最后通过 M-x package-install 来安装的，加了设置。
还可以。
成功了。
#+begin_src v
fn main() {
println('hello world!!!')
            }

#+end_src
#+begin_src shell
v run hello

#+end_src
*** R1D8 第八天
<2022-05-22 Sun 15:00>
**** 新的想法，建立一个文件来追踪一个学习时间记录
感觉建立一个 execel 文件比较好是吧，因为简单一些。好统计。
计划要学习 keynote 和 number 了。
**** 目前的尝试是 使用苹果日历，来安排活动，增加了 学习和非学习两个日历，
分别设置不同的颜色。
*** R1D9 第九天
    思考学习什么编程技术。
    整理一下学到的东西，最近刚学习了 c 语言，想起了学习 C 项目：nvim 项目。可以作为新手项目来学习一下。
    <2022-05-23 Mon 16:18> 
    似乎自己的水平还不够哇！！
**** 以前学过的东西整理：
     - C
     - JS  HTML  CSS elm react vue svelte hugo lisp racket scheme emacs ruby rails python 
       ios
       swift OC java linux unix 
       克服拖延症，时间管理，


     发现 5 月 21 号没有学习，忘记了忘记自己为什么没有写日记了。我晕死了。
**** 发现一个小而美的 wiki
feather.wiki  羽毛维基，开始学习这个很不错，
有个想法是自己编写一个类似的东西，但是使用 org-mode 来处理这个，网站模拟 Emacs 的编辑模式，针对 Emacs 用户的使用习惯，使用 vim 打字的方式。
不要好高骛远了，还是先学习这个软件的使用吧。
***** TODO 学习羽毛维基
***** 在 codeberg 上注册了一个账号
codeberg.org
*** R1D10 第十天
白天工作事情太多了。
<2022-05-24 Tue 20:00>
*** R1D11 第十一天
<2022-05-25 Wed 21:00>
工作比较忙，晚上在家搞。
#+begin_src emacs-lisp

                        (insert-rectangle '("first" "second" "third"))


(apply 'max 3 7 3 4 '(4 8 5))
;;; First version 0.1
(defun column-of-graph (max-graph-height actual-height)
  "Return list of strings that is one column of a graph"
  (let ((insert-list nil)
        (number-of-top-blanks (- max-graph-height actual-height)))
;; Fill in *
    (while (> actual-height 0)
      (setq insert-list (cons "*" insert-list))
    (setq actual-height (1- actual-height)))

                        ;;; Fill in blanks
    (while (> number-of-top-blanks 0)
      (setq insert-list (cons " " insert-list))
      (setq number-of-top-blanks (1- number-of-top-blanks)))

    ;; return while list
    insert-list))
         (column-of-graph 5 3)
#+end_src
*** R1D12 第十二天
<2022-05-26 Thu 20:00>

#+begin_src emacs-lisp

(defvar graph-symol "*"
  "String used as symol in graph, usually an asterisk.")
;; 15.1  graph-body-print  function

#+end_src
**** 继续学习 Emacs-lisp introduce
**** 后面几章都浏览完了。
*** R1D13 第十三天
<2022-05-27 Fri 20:00>
**** 工作
热电厂的事情终于解决了。大门口的暖气我们来重新接，阀门井取消封死。
**** code 100 天学习什么呢？
还没有最后的答案，要不还是学习 ruby on rails 得了。

客观上讲，今天应该不算。
*** R1D14 第十四天
<2022-05-28 Sat 09:00>
**** 100 天都学习什么东西？
是否做一个元学习的系列。
#+begin_src v


#+end_src
**** 一个新的想法， 做一个代码结构图解，图形化的显示器
cad 的工程师的灵感，都是使用图纸来设计建筑，软件是否也可以来使用图纸来做。
类似与 autocad 的软件来画图，UML 应该就是这么做的吧。

使用什么软件来作图？
- draw.io
- cad
- pages
- word

这个是低层次的东西，为了理解代码来的。类似于代码可视化的问题。

**** 编写一个画图程序，模仿 cad 程序，是很难的。 三个选择：
- Emacs

- vim

- native
还是不要过度优化，
罪恶之源就是过度优化，先实验一下吧。:w
**** 编写一个类似与写字板类型的 cad 画图程序。
或者是类似于画图的程序的 cad 程序；
特征：
- 极简主义
- 类似与 vim
- 插件化，容易扩展
- vlang 来写？c 语言好
- 桌面应用 or web app？
**** 思考一个问题：忘记了？
画图来说明架构是 很平常的事情，
**** 建筑行业和软件行业对比研究
似乎以前思考过
*** R1D15 第十五天
<2022-05-30 Mon 20:00>
晚上值班，又找一个一些关于 UML 的书籍，还有软件开发的，以及全栈的。
思考关于图形理解编程的资料。
图形理解编程，图形知识工具，随着水平的提高，工具就可以不用了。类似于初学者练习瑜伽，一开始要使用辅助工具，随着的水平的提高，就可以丢弃工具也可以达到目的了。
#+begin_src v

#+end_src
#+begin_src red

#+end_src
#+begin_src nim

#+end_src
*** R1D16 第十六天
<2022-05-31 Tue 20:40>
#+begin_src python

#+end_src
*** R1D17 第十七天
<2022-06-08 Wed 21:15>

昨天开始搞  rust 语言。
在看 入门教程书，很不错，中文翻译的好。
#+begin_src rust
fn main () {
 println! ( " hello world !" );
}

#+end_src
看到了第三章了，在讲解借用，引用，和 slice。
*** R1D18 第十八天
<2022-06-09 Thu 20:45>
进度很快看了两章的内容。
第五章：使用结构体来组织相关联的数据
第六章：枚举与模式匹配
现在开始看 第七章：使用包、Crate 箱子和模块来管理不断增长的项目
**** 7.1 包和 crate
**** 7.2 定义模块来控制作用域与私有性
**** 7.3 路径用于引用模块树中的项目
*** R1D19 第十九天
继续学习 rust 模块化方法。
#+begin_src rust
mod front_of_house;
pub use crate::front_of_house::hosting;
pub fn eat_at_restaurant(){
hosting::add_to_waitlist();
}

#+end_src
**** 总结
Rust 提供了将包分成多个 crate，将 crate 分成模块，以及通过指定绝对或者是相对路径从一个模块引用另一个模块中定义的项的方式。你可以通过使用 use 语句将路径引入作用域，这样在多次使用时可以使用更短的路径。模块定义的代码默认是私有的，不过可以选择增加关键字 pub 使其变为公有。
**** ch08 常见集合
collection
数组和元组，集合数据存储在堆上。
***** vector
原来存储一系列的值
Vec(T),只能存储相同类型的值。例如文件中的文本行，或者是购物车中商品的价格。

***** string
***** map(hash map)
